#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

/ {
};

/ {
    behaviors {
        hr: hr {
            compatible = "zmk,behavior-hold-tap";
            label = "home_row";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
        };

        copy: copy {
            compatible = "zmk,behavior-tap-dance";
            label = "COPY";
            #binding-cells = <0>;
            bindings = <&kp C>, <&kp K_COPY>;
        };

        paste: paste {
            compatible = "zmk,behavior-tap-dance";
            label = "PASTE";
            #binding-cells = <0>;
            bindings = <&kp V>, <&kp INSERT>;
        };
    };

    combos {
        compatible = "zmk,combos";

        newbox {
            bindings = <&kp LC(N)>;
            key-positions = <13 14>;
        };

        desk {
            bindings = <&kp RG(D)>;
            key-positions = <15 14>;
        };

        oppen {
            bindings = <&kp RG(E)>;
            key-positions = <15 16>;
        };

        DEEK {
            bindings = <&kp LA(F4)>;
            key-positions = <16 17>;
        };

        LOCK {
            bindings = <&kp LG(L)>;
            key-positions = <28 29>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC    &kp Q  &kp W  &kp E             &kp R            &kp T        &kp Y        &kp U       &kp I        &kp O    &kp P     &kp RIGHT_BRACKET
&kp TAB    &kp A  &kp S  &kp D             &kp F            &kp G        &kp H        &kp J       &kp K        &kp L    &kp SEMI  &kp ENTER
&kp LCTRL  &kp Z  &kp X  &kp C             &kp V            &kp B        &kp N        &kp M       &kp COMMA    &kp DOT  &kp FSLH  &kp DEL
                         &lt RSE LEFT_WIN  &mt LSHFT SPACE  &lt LWR RET  &lt LWR ESC  &lt 2 BSPC  &lt RSE DEL
            >;
        };

        lower_layer {
            bindings = <
&kp TILDE       &kp NUMBER_1      &kp NUMBER_2      &kp NUMBER_3         &kp NUMBER_4           &kp N5     &kp NUMBER_6  &kp N7                &kp N8          &kp N9               &kp N0   &kp BACKSPACE
&caps_word      &kp LA(NUMBER_1)  &kp LA(NUMBER_3)  &hr N5 LEFT_CONTROL  &hr NUMBER_4 LEFT_GUI  &kp MINUS  &kp EQUAL     &hr DOLLAR RIGHT_GUI  &kp UP_ARROW    &hr CARET RIGHT_ALT  &kp SQT  &kp ENTER
&kp LEFT_SHIFT  &kp MINUS         &kp N9            &kp LC(C)            &kp LC(V)              &kp ENTER  &none         &kp LEFT_ARROW        &kp DOWN_ARROW  &kp RIGHT_ARROW      &none    &none
                                                    &lt ADJ TAB          &trans                 &trans     &trans        &trans                &lt ADJ DEL
            >;
        };

        raise_layer {
            bindings = <
&none  &kp F1  &kp F2   &kp F3   &kp F4   &none        &none        &none     &kp C_VOLUME_DOWN     &kp C_VOLUME_UP  &none            &none
&none  &kp F5  &kp F6   &kp F7   &kp F8   &none        &none        &kp LEFT  &kp DOWN              &kp UP           &kp RIGHT_ARROW  &none
&none  &kp F9  &kp F10  &kp F11  &kp F12  &none        &none        &none     &kp C_BRIGHTNESS_DEC  &kp C_BRI_UP     &none            &none
                        &trans   &trans   &lt ADJ RET  &lt ADJ ESC  &trans    &trans
            >;
        };

        adjust_layer {
            bindings = <
&none           &none       &out OUT_TOG  &soft_off     &none  &none        &none           &soft_off  &out OUT_TOG  &bootloader   &none         &bootloader
&bt BT_CLR_ALL  &bt BT_CLR  &bt BT_SEL 1  &bt BT_SEL 2  &none  &kp K_POWER  &kp K_POWER     &none      &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
&none           &none       &none         &none         &none  &none        &studio_unlock  &none      &none         &none         &none         &none
                                          &trans        &none  &trans       &trans          &none      &trans
            >;
        };
    };
};
